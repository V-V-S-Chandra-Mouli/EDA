# -*- coding: utf-8 -*-
"""EDA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19BkJjIkJQyN_AdntSyFF65Z1z7IhTITJ
"""

#importing necessary lib
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#read the csv file
df = pd.read_csv('/content/synthetic_online_retail_data.csv')

# Preview data
print(df.shape)
df.head()

print(df.info())

# Duplicates
print(f"Duplicates: {df.duplicated().sum()}")

# Missing values
print(df.isnull().sum())

# to deal with 201 missing values of any column we can choose any one of the following
#1. drop missing rows (if only a small portion say 10%)
#2. impute with mean or mode
#df = df.dropna(subset=['review_score'])
df['review_score'] = df['review_score'].fillna(df['review_score'].mean())
#df['review_score'] = df['review_score'].fillna(df['review_score'].mode()[0])

df['gender'] = df['gender'].fillna(df['gender'].mode()[0])

#to check review_score missing values are handled or not
print(df['review_score'].isnull().sum())
print(df['gender'].isnull().sum())

#to cross check again
print(df.isnull().sum())

# Visualize the distribution of review scores
sns.set(style="whitegrid")
plt.figure(figsize=(5, 2))
sns.histplot(df['review_score'], kde=True)
plt.title('Distribution of Review Scores')
plt.xlabel('Review Score')
plt.ylabel('Frequency')
plt.show()

sns.set(style="whitegrid")
# Analyze the distribution of gender
plt.figure(figsize=(2, 2))
sns.countplot(x='gender', data=df)
plt.title('Distribution of Gender')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.show()

# Example of visualizing a relationship between two numerical variables
# Replace 'some_numerical_column' with an actual numerical column name from your DataFrame
plt.figure(figsize=(5, 3))
sns.scatterplot(x='age', y='review_score', data=df)
plt.title('Relationship between Some age and Review Score')
plt.xlabel('Age')
plt.ylabel('Review Score')
plt.show()

sns.set(style="whitegrid")
fig, axs = plt.subplots(2, 2, figsize=(14, 10))

#Plots how many items (quantity) are typically bought per order
sns.histplot(df['quantity'], bins=20, kde=True, ax=axs[0, 0], color='skyblue')
axs[0, 0].set_title('Quantity Distribution')

#whether products are mostly low cost, mid range, premiem cost
sns.histplot(df['price'], bins=20, kde=True, ax=axs[0, 1], color='salmon')
axs[0, 1].set_title('Price Distribution')

#to analyze our target audience's age range
sns.histplot(df['age'], bins=20, kde=True, ax=axs[1, 0], color='mediumseagreen')
axs[1, 0].set_title('Customer Age Distribution')

#to visualizes how customers rate products from 1 to 5
sns.histplot(df['review_score'], bins=5, kde=False, ax=axs[1, 1], color='black')
axs[1, 1].set_title('Review Score Distribution')

plt.tight_layout()
plt.show()

# Let's now explore categorical variables
fig, axs = plt.subplots(2, 2, figsize=(14, 10))

# Gender distribution
sns.countplot(data=df, x='gender', order=df['gender'].value_counts().index, ax=axs[0, 0])
axs[0, 0].set_title('Gender Distribution')

# Category distribution
sns.countplot(data=df, y='category_name', order=df['category_name'].value_counts().index, ax=axs[1, 1])
axs[1, 1].set_title('Product Category Distribution')

# Payment Method distribution
sns.countplot(data=df, x='payment_method', order=df['payment_method'].value_counts().index, ax=axs[0, 1])
axs[0, 1].set_title('Payment Method Distribution')
axs[0, 1].tick_params(axis='x', rotation=15)

# Top 10 Cities by Order Count
top_cities = df['city'].value_counts().nlargest(10)
sns.barplot(x=top_cities.values, y=top_cities.index, ax=axs[1, 0])
axs[1, 0].set_title('Top 10 Cities by Order Count')
axs[1, 0].set_xlabel('Number of Orders')

plt.tight_layout()
plt.show()

# Let's calculate revenue

df['total_price'] = df['quantity'] * df['price']
revenue_by_category = df.groupby('category_name')['total_price'].sum().sort_values(ascending=False)
top_products_by_revenue = df.groupby('product_name')['total_price'].sum().sort_values(ascending=False).head(10)

# Plotting
fig, axs = plt.subplots(1, 2, figsize=(16, 6))

# Revenue by category
sns.barplot(x=revenue_by_category.values, y=revenue_by_category.index, ax=axs[0])
axs[0].set_title('Total Revenue by Category')
axs[0].set_xlabel('Revenue ($)')
axs[0].set_ylabel('Category')

# Top 10 products by revenue
sns.barplot(x=top_products_by_revenue.values, y=top_products_by_revenue.index, ax=axs[1])
axs[1].set_title('Top 10 Products by Revenue')
axs[1].set_xlabel('Revenue ($)')
axs[1].set_ylabel('Product Name')

plt.tight_layout()
plt.show()

# Customer Segmentation: Age and Gender vs Total Spending

# Group by age buckets
age_bins = [18, 25, 35, 45, 55, 65, 75]
age_labels = ['18-24', '25-34', '35-44', '45-54', '55-64', '65-75']
df['age_group'] = pd.cut(df['age'], bins=age_bins, labels=age_labels, right=False)

# Total revenue by age group
revenue_by_age = df.groupby('age_group')['total_price'].sum()

# Revenue by gender
revenue_by_gender = df.groupby('gender')['total_price'].sum()

# Plotting
fig, axs = plt.subplots(1, 2, figsize=(14, 6))

# Revenue by Age Group
sns.barplot(x=revenue_by_age.index, y=revenue_by_age.values, ax=axs[0], palette='viridis')
axs[0].set_title('Total Revenue by Age Group')
axs[0].set_ylabel('Revenue ($)')
axs[0].set_xlabel('Age Group')

# Revenue by Gender
sns.barplot(x=revenue_by_gender.index, y=revenue_by_gender.values, ax=axs[1], palette='Set2')
axs[1].set_title('Total Revenue by Gender')
axs[1].set_ylabel('Revenue ($)')
axs[1].set_xlabel('Gender')

plt.tight_layout()
plt.show()

# Compute correlation matrix for numeric variables
numeric_df = df[['quantity', 'price', 'review_score', 'age', 'total_price']]
corr_matrix = numeric_df.corr()

# Plot heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Heatmap of Numeric Features')
plt.tight_layout()
plt.show()

